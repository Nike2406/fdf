# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    testc                                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: prochell <prochell@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/08/01 14:12:58 by prochell          #+#    #+#              #
#    Updated: 2021/08/11 14:57:21 by prochell         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../fdf.h"

float	MOD(float a)
{
	if (a < 0)
		return (-a);
	else
		return (a);
}

float	MAX(float a, float b)
{
	if (a < b)
		return (b);
	else
		return (a);
}

void	isometric(t_fdf *data)
{
	p->x = (p->x - p->y) * cos(0.8);
	p->y = (p->x + p->y) * sin(0.8) - p->z * data->cof_z;
	p->x1 = (p->x1 - p->y1) * cos(0.8);
	p->y1 = (p->x1 + p->y1) * sin(0.8) - p1->z * data->cof_z;
}

void	get_color(t_fdf *data)
{
	// Color
	// if (z || z1)
	// 	data->color = 0xFFCF40;
	// else
	// 	data->color = 0x8243D6;
	// int	tmp_color;
	// int	col1 = 0xFFCF40;
	// int	col2 = 0x8243D6;
	// float	coeff;


	// (void)x;
	// (void)y;
	// (void)x1;
	// (void)y1;
	// (void)z;
	// (void)z1;

	// data->color = 0x8243D6;
	// if (z)
	// 	data->color += z;
	// else if (z1)
	// 	data->color += z1;

	// coeff = sqrt((x1 - y1) * (x1 - y1)
	// 		+ (x - y) * (x - y))
	// 	/ sqrt((y - z1) * (y - z1)
	// 		+ (x - z) * (x - z));

	// data->color = create_trgb(0, get_r(col1) \
	// 		+ (get_r(col2) - get_r(col1)) * coeff, \
	// 		get_g(col1) + (get_g(col2) - get_g(col1)) * coeff, \
	// 		get_b(col1) + (get_b(col2) - get_b(col1)) * coeff);

	if (p->z || p1->z)
	{
		data->color = 0xFFCF40;
	}
	else
		data->color = 0x8243D6;

}

// [1:1] [3:12]
void	bresenham(float x, float y, float x1, float y1, t_fdf *data)
{
	float	x_step;
	float	y_step;
	int		max;
	// int		z;
	// int		z1;
	p->x = x;
	p->x1 = x1;
	p->y = y;
	p->y1 = y1;

	p->z = data->matrix[(int)p->y][(int)p->x];
	p1->z = data->matrix[(int)p->y1][(int)p->x1];

	// Zoom
	p->x *= p->zoom;
	p->y *= p->zoom;
	p->x1 *= p->zoom;
	p->y1 *= p->zoom;

	// p->x = x;
	// p->x1 = x1;
	// p->y = y;
	// p->y1 = y1;

	// Isometric
	isometric(data);

	// Centering
	p->x += 400;
	p->y += 300;
	p->x1 += 400;
	p->y1 += 300;

	// Shift
	p->x += data->shift_x;
	p->x1 += data->shift_x;
	p->y += data->shift_y;
	p->y1 += data->shift_y;

	x_step = p->x1 - p->x; // -2
	y_step = p->y1 - p->y; // -11
	max = MAX(MOD(x_step), MOD(y_step));
	x_step /= max;
	y_step /= max;

	//  x = p->x;
	//  x1 = p->x1;
	//  y = p->y;
	//  y1 = p->y1;

	while ((int)(p->x - p->x1) || (int)(p->y - p->y1))
	{
		if ((p->x >= 0 && p->x <= data->img_width) && \
		(p->y >= 0 && p->y <= data->img_height))
		{
			get_color(data);
			my_mlx_pixel_put(data, p->x, p->y, data->color);
		}
		p->x += x_step;
		p->y += y_step;
	}
}

void	draw(t_fdf *data)
{
	int	x;
	int	y;

	y = 0;
	while (y < data->height)
	{
		x = 0;
		while (x < data->width)
		{
			if (x < data->width - 1)
				bresenham(x, y, x + 1, y, data);
			if (y < data->height - 1)
				bresenham(x, y, x, y + 1, data);
			x++;
		}
		y++;
	}
}
